#include<stdio.h>
#include<string.h> 
#include<stdlib.h>
#include<sys/socket.h> 
#include<pthread.h>
#include<netdb.h> 
#include<arpa/inet.h>

struct hostent *host;
struct in_addr **addrlist;
void host_to_ip (char *, char []); 
void connect_to_ip (char []); 
int main (int argc, char *argv[])
 {
 if (argc < 2) { 
printf ("[./prog-name] [ip or hostname]\n");
 return 0; }

 char hld_ip [100];
 if ((host = gethostbyname (argv[1])) == NULL)
 printf ("Wrong host\n");
 else host_to_ip (argv[1], hld_ip); 

printf ("\nip >-->> %s\n\n", hld_ip);
 connect_to_ip (hld_ip); 
return 0; 
} 

// Convert domain name to ip (DNS);
 void host_to_ip (char *a, char ip []) 
{ 
int cnt; 
printf ("\nUrl >-->> %s", a); 
addrlist = (struct inaddr **)host->h_addr_list; 
for (cnt = 0; addrlist[cnt] != NULL; cnt++)
 strcpy (ip, inet_ntoa(*addrlist[cnt])); 
} 
// Connect to ip; 
void connect_to_ip (char a[])
 { int sck; 
struct sockaddr_in info;
 char *msg = "GET / HTTP/1.1\r\n\r\n";
 char chr [2000]; 
if ((sck = socket (AF_INET, SOCK_STREAM, 0)) < 0) 
printf ("Socket Error\n");
 else
 { 
info.sin_addr.s_addr = inet_addr (a);
 info.sin_port = htons (80);
 info.sin_family = AF_INET; 
} 
if (connect (sck, (struct sockaddr *)&info, sizeof (info)) < 0)
 printf ("Not Connected\n");
 if ((send (sck, msg, strlen (msg), 0)) < 0)
 printf ("Sending Error\n");
recv (sck, chr, sizeof (chr), 0);
 printf ("\n%s", chr); 
}
